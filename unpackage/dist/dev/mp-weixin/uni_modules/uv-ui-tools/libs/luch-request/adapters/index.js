"use strict";const i=require("../../../../../common/vendor.js"),h=require("../helpers/buildURL.js"),_=require("../core/buildFullPath.js"),c=require("../core/settle.js"),m=require("../utils.js"),o=(e,u)=>{let d={};return e.forEach(l=>{m.isUndefined(u[l])||(d[l]=u[l])}),d},b=e=>new Promise((u,d)=>{let l=h.buildURL(_.buildFullPath(e.baseURL,e.url),e.params,e.paramsSerializer);const s={url:l,header:e.header,complete:t=>{e.fullPath=l,t.config=e,t.rawData=t.data;try{let a=!1;const n=typeof e.forcedJSONParsing;n==="boolean"?a=e.forcedJSONParsing:n==="object"&&(a=(e.forcedJSONParsing.include||[]).includes(e.method)),a&&typeof t.data=="string"&&(t.data=JSON.parse(t.data))}catch{}c.settle(u,d,t)}};let r;if(e.method==="UPLOAD"){delete s.header["content-type"],delete s.header["Content-Type"];let t={filePath:e.filePath,name:e.name};const a=["timeout","formData"];r=i.index.uploadFile({...s,...t,...o(a,e)})}else if(e.method==="DOWNLOAD"){const t=["timeout","filePath"];r=i.index.downloadFile({...s,...o(t,e)})}else{const t=["data","method","timeout","dataType","responseType","enableHttp2","enableQuic","enableCache","enableHttpDNS","httpDNSServiceId","enableChunked","forceCellularNetwork"];r=i.index.request({...s,...o(t,e)})}e.getTask&&e.getTask(r,e)});exports.adapter=b;
//# sourceMappingURL=../../../../../../.sourcemap/mp-weixin/uni_modules/uv-ui-tools/libs/luch-request/adapters/index.js.map
