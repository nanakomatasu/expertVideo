{"version":3,"file":"request.js","sources":["request/request.js"],"sourcesContent":["import {\r\n\tSERVERTAPI\r\n} from \"../config\";\r\nimport { useUserStore } from \"../store/user\";\r\nconst userStore = useUserStore()\n\r\n// 处理需要登录的情况\r\nconst handleLoginRequired = () => {\r\n\treturn new Promise((resolve) => {\r\n\t\tuni.showModal({\r\n\t\t\ttitle: '请先去登陆吧',\r\n\t\t\tsuccess(res) {\r\n\t\t\t\tif (res.confirm) {\r\n\t\t\t\t\tuni.navigateTo({\r\n\t\t\t\t\t\turl: \"/pages/account/login\"\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tresolve();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n};\r\n\r\n// 处理错误提示\r\nconst showErrorToast = (message) => {\r\n\tuni.showToast({\r\n\t\ticon: 'none',\r\n\t\ttitle: message\r\n\t});\r\n};\r\n\r\nexport const request = (options = {}) => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst token = uni.getStorageSync('token');\r\n\t\tconst header = {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...options.header,\r\n\t\t};\r\n\r\n\t\tif (token) {\r\n\t\t\theader['Authorization'] = `Bearer ${token}`;\r\n\t\t}\r\n\t\tuni.request({\r\n\t\t\turl: SERVERTAPI + options.url,\r\n\t\t\tmethod: options.method || 'GET',\r\n\t\t\tdata: options.data || {},\r\n\t\t\ttimeout: 100000,\r\n\t\t\theader: header,\r\n\t\t\tsuccess: async (res) => {\r\n\t\t\t\tif (res.statusCode === 200) {\r\n\t\t\t\t\t// 处理需要登录的情况\r\n\t\t\t\t\tif (res.data.code === 300 || res.data.code === 100) {\r\n\t\t\t\t\t\tawait handleLoginRequired();\r\n\t\t\t\t\t\treject(res);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 处理业务错误\r\n\t\t\t\t\tif (res.code === 0) {\r\n\t\t\t\t\t\tshowErrorToast(res.info);\r\n\t\t\t\t\t\treject(res);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// 成功情况\r\n\t\t\t\t\tresolve(res.data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 处理未授权情况\r\n\t\t\t\t\tif (res.statusCode === 401) {\r\n\t\t\t\t\t\tawait handleLoginRequired();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshowErrorToast(`请求失败，状态码：${res.statusCode}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treject(res);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tfail: (err) => {\r\n\t\t\t\tshowErrorToast('网络请求失败');\r\n\t\t\t\tconsole.log(SERVERTAPI + options.url, err);\r\n\t\t\t\treject(err);\r\n\t\t\t},\r\n\t\t});\r\n\t});\r\n};"],"names":["useUserStore","handleLoginRequired","resolve","uni","res","showErrorToast","message","request","options","reject","token","header","SERVERTAPI","err"],"mappings":"kHAIkBA,EAAAA,aAAc,EAGhC,MAAMC,EAAsB,IACpB,IAAI,QAASC,GAAY,CAC/BC,EAAAA,MAAI,UAAU,CACb,MAAO,SACP,QAAQC,EAAK,CACZ,GAAIA,EAAI,QACPD,EAAAA,MAAI,WAAW,CACd,IAAK,sBACX,CAAM,MAED,QAEDD,GACA,CACJ,CAAG,CACH,CAAE,EAIIG,EAAkBC,GAAY,CACnCH,EAAAA,MAAI,UAAU,CACb,KAAM,OACN,MAAOG,CACT,CAAE,CACF,EAEaC,EAAU,CAACC,EAAU,KAC1B,IAAI,QAAQ,CAACN,EAASO,IAAW,CACvC,MAAMC,EAAQP,EAAAA,MAAI,eAAe,OAAO,EAClCQ,EAAS,CACd,eAAgB,mBAChB,GAAGH,EAAQ,MACd,EAEME,IACHC,EAAO,cAAmB,UAAUD,CAAK,IAE1CP,EAAAA,MAAI,QAAQ,CACX,IAAKS,EAAAA,WAAaJ,EAAQ,IAC1B,OAAQA,EAAQ,QAAU,MAC1B,KAAMA,EAAQ,MAAQ,CAAE,EACxB,QAAS,IACT,OAAQG,EACR,QAAS,MAAOP,GAAQ,CACvB,GAAIA,EAAI,aAAe,IAAK,CAE3B,GAAIA,EAAI,KAAK,OAAS,KAAOA,EAAI,KAAK,OAAS,IAAK,CACnD,MAAMH,EAAmB,EACzBQ,EAAOL,CAAG,EACV,MACA,CAGD,GAAIA,EAAI,OAAS,EAAG,CACnBC,EAAeD,EAAI,IAAI,EACvBK,EAAOL,CAAG,EACV,MACA,CAGDF,EAAQE,EAAI,IAAI,CACrB,MAESA,EAAI,aAAe,IACtB,MAAMH,EAAmB,EAEzBI,EAAe,YAAYD,EAAI,UAAU,EAAE,EAE5CK,EAAOL,CAAG,CAEX,EACD,KAAOS,GAAQ,CACdR,EAAe,QAAQ,EACvBF,QAAA,MAAA,MAAA,2BAAYS,EAAU,WAAGJ,EAAQ,IAAKK,CAAG,EACzCJ,EAAOI,CAAG,CACV,CACJ,CAAG,CACH,CAAE"}