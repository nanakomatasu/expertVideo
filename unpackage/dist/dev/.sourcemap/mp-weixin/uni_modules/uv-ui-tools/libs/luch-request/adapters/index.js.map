{"version":3,"file":"index.js","sources":["uni_modules/uv-ui-tools/libs/luch-request/adapters/index.js"],"sourcesContent":["import buildURL from '../helpers/buildURL'\r\nimport buildFullPath from '../core/buildFullPath'\r\nimport settle from '../core/settle'\r\nimport {isUndefined} from \"../utils\"\r\n\r\n/**\r\n * 返回可选值存在的配置\r\n * @param {Array} keys - 可选值数组\r\n * @param {Object} config2 - 配置\r\n * @return {{}} - 存在的配置项\r\n */\r\nconst mergeKeys = (keys, config2) => {\r\n  let config = {}\r\n  keys.forEach(prop => {\r\n    if (!isUndefined(config2[prop])) {\r\n      config[prop] = config2[prop]\r\n    }\r\n  })\r\n  return config\r\n}\r\nexport default (config) => {\r\n  return new Promise((resolve, reject) => {\r\n    let fullPath = buildURL(buildFullPath(config.baseURL, config.url), config.params, config.paramsSerializer)\r\n    const _config = {\r\n      url: fullPath,\r\n      header: config.header,\r\n      complete: (response) => {\r\n        config.fullPath = fullPath\r\n        response.config = config\r\n        response.rawData = response.data\r\n        try {\r\n          let jsonParseHandle = false\r\n          const forcedJSONParsingType = typeof config.forcedJSONParsing\r\n          if (forcedJSONParsingType === 'boolean') {\r\n            jsonParseHandle = config.forcedJSONParsing\r\n          } else if (forcedJSONParsingType === 'object') {\r\n            const includesMethod = config.forcedJSONParsing.include || []\r\n            jsonParseHandle = includesMethod.includes(config.method)\r\n          }\r\n\r\n          // 对可能字符串不是json 的情况容错\r\n          if (jsonParseHandle && typeof response.data === 'string') {\r\n            response.data = JSON.parse(response.data)\r\n          }\r\n          // eslint-disable-next-line no-empty\r\n        } catch (e) {\r\n        }\r\n        settle(resolve, reject, response)\r\n      }\r\n    }\r\n    let requestTask\r\n    if (config.method === 'UPLOAD') {\r\n      delete _config.header['content-type']\r\n      delete _config.header['Content-Type']\r\n      let otherConfig = {\r\n        // #ifdef MP-ALIPAY\r\n        fileType: config.fileType,\r\n        // #endif\r\n        filePath: config.filePath,\r\n        name: config.name\r\n      }\r\n      const optionalKeys = [\r\n        // #ifdef APP-PLUS || H5\r\n        'files',\r\n        // #endif\r\n        // #ifdef H5\r\n        'file',\r\n        // #endif\r\n        // #ifdef H5 || APP-PLUS || MP-WEIXIN || MP-ALIPAY || MP-TOUTIAO || MP-KUAISHOU\r\n        'timeout',\r\n        // #endif\r\n        'formData'\r\n      ]\r\n      requestTask = uni.uploadFile({..._config, ...otherConfig, ...mergeKeys(optionalKeys, config)})\r\n    } else if (config.method === 'DOWNLOAD') {\r\n      const optionalKeys = [\r\n        // #ifdef H5 || APP-PLUS || MP-WEIXIN || MP-ALIPAY || MP-TOUTIAO || MP-KUAISHOU\r\n        'timeout',\r\n        // #endif\r\n        // #ifdef MP\r\n        'filePath',\r\n        // #endif\r\n      ]\r\n      requestTask = uni.downloadFile({..._config, ...mergeKeys(optionalKeys, config)})\r\n    } else {\r\n      const optionalKeys = [\r\n        'data',\r\n        'method',\r\n        // #ifdef H5 || APP-PLUS || MP-ALIPAY || MP-WEIXIN\r\n        'timeout',\r\n        // #endif\r\n        'dataType',\r\n        // #ifndef MP-ALIPAY\r\n        'responseType',\r\n        // #endif\r\n        // #ifdef APP-PLUS\r\n        'sslVerify',\r\n        // #endif\r\n        // #ifdef H5\r\n        'withCredentials',\r\n        // #endif\r\n        // #ifdef APP-PLUS\r\n        'firstIpv4',\r\n        // #endif\r\n        // #ifdef MP-WEIXIN\r\n        'enableHttp2',\r\n        'enableQuic',\r\n        // #endif\r\n        // #ifdef MP-TOUTIAO || MP-WEIXIN\r\n        'enableCache',\r\n        // #endif\r\n        // #ifdef MP-WEIXIN\r\n        'enableHttpDNS',\r\n        'httpDNSServiceId',\r\n        'enableChunked',\r\n        'forceCellularNetwork',\r\n        // #endif\r\n        // #ifdef MP-ALIPAY\r\n        'enableCookie',\r\n        // #endif\r\n        // #ifdef MP-BAIDU\r\n        'cloudCache',\r\n        'defer'\r\n        // #endif\r\n      ]\r\n      requestTask = uni.request({..._config, ...mergeKeys(optionalKeys, config)})\r\n    }\r\n    if (config.getTask) {\r\n      config.getTask(requestTask, config)\r\n    }\r\n  })\r\n}\r\n"],"names":["mergeKeys","keys","config2","config","prop","isUndefined","adapter","resolve","reject","fullPath","buildURL","buildFullPath","_config","response","jsonParseHandle","forcedJSONParsingType","settle","requestTask","otherConfig","optionalKeys","uni"],"mappings":"kMAWMA,EAAY,CAACC,EAAMC,IAAY,CACnC,IAAIC,EAAS,CAAE,EACf,OAAAF,EAAK,QAAQG,GAAQ,CACdC,EAAW,YAACH,EAAQE,CAAI,CAAC,IAC5BD,EAAOC,CAAI,EAAIF,EAAQE,CAAI,EAEjC,CAAG,EACMD,CACT,EACeG,EAACH,GACP,IAAI,QAAQ,CAACI,EAASC,IAAW,CACtC,IAAIC,EAAWC,EAAAA,SAASC,EAAa,cAACR,EAAO,QAASA,EAAO,GAAG,EAAGA,EAAO,OAAQA,EAAO,gBAAgB,EACzG,MAAMS,EAAU,CACd,IAAKH,EACL,OAAQN,EAAO,OACf,SAAWU,GAAa,CACtBV,EAAO,SAAWM,EAClBI,EAAS,OAASV,EAClBU,EAAS,QAAUA,EAAS,KAC5B,GAAI,CACF,IAAIC,EAAkB,GACtB,MAAMC,EAAwB,OAAOZ,EAAO,kBACxCY,IAA0B,UAC5BD,EAAkBX,EAAO,kBAChBY,IAA0B,WAEnCD,GADuBX,EAAO,kBAAkB,SAAW,CAAE,GAC5B,SAASA,EAAO,MAAM,GAIrDW,GAAmB,OAAOD,EAAS,MAAS,WAC9CA,EAAS,KAAO,KAAK,MAAMA,EAAS,IAAI,EAG3C,MAAW,CACX,CACDG,SAAOT,EAASC,EAAQK,CAAQ,CACjC,CACF,EACD,IAAII,EACJ,GAAId,EAAO,SAAW,SAAU,CAC9B,OAAOS,EAAQ,OAAO,cAAc,EACpC,OAAOA,EAAQ,OAAO,cAAc,EACpC,IAAIM,EAAc,CAIhB,SAAUf,EAAO,SACjB,KAAMA,EAAO,IACd,EACD,MAAMgB,EAAe,CAQnB,UAEA,UACD,EACDF,EAAcG,EAAG,MAAC,WAAW,CAAC,GAAGR,EAAS,GAAGM,EAAa,GAAGlB,EAAUmB,EAAchB,CAAM,CAAC,CAAC,CACnG,SAAeA,EAAO,SAAW,WAAY,CACvC,MAAMgB,EAAe,CAEnB,UAGA,UAED,EACDF,EAAcG,EAAAA,MAAI,aAAa,CAAC,GAAGR,EAAS,GAAGZ,EAAUmB,EAAchB,CAAM,CAAC,CAAC,CACrF,KAAW,CACL,MAAMgB,EAAe,CACnB,OACA,SAEA,UAEA,WAEA,eAYA,cACA,aAGA,cAGA,gBACA,mBACA,gBACA,sBASD,EACDF,EAAcG,EAAAA,MAAI,QAAQ,CAAC,GAAGR,EAAS,GAAGZ,EAAUmB,EAAchB,CAAM,CAAC,CAAC,CAC3E,CACGA,EAAO,SACTA,EAAO,QAAQc,EAAad,CAAM,CAExC,CAAG"}