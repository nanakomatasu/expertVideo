{"version":3,"file":"debounce.js","sources":["uni_modules/tuniaoui-vue3/libs/lodash/debounce.ts"],"sourcesContent":["import { isObject } from '@vue/shared'\nimport { toNumber } from './_toNumber'\n\nimport type { DebounceSettings, DebouncedFunc } from './_common'\n\nconst FUNC_ERROR_TEXT = 'Expected a function'\n\nexport function debounce<T extends (...args: any) => any>(\n  func: T,\n  wait?: number,\n  options?: DebounceSettings\n): DebouncedFunc<T> {\n  let lastArgs: any\n  let lastThis: any\n  let maxWait: any\n  let result: any\n  let timerId: any\n  let lastCallTime: any\n  let lastInvokeTime = 0\n  let leading = false\n  let maxing = false\n  let trailing = true\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT)\n  }\n  wait = toNumber(wait) || 0\n  if (isObject(options)) {\n    leading = !!options.leading\n    maxing = 'maxWait' in options\n    maxWait = maxing\n      ? Math.max(toNumber(options.maxWait) || 0, wait as number)\n      : maxWait\n    trailing = 'trailing' in options ? !!options.trailing : trailing\n  }\n\n  function invokeFunc(time: number) {\n    const args = lastArgs,\n      thisArg = lastThis\n\n    lastArgs = lastThis = undefined\n    lastInvokeTime = time\n    result = func.apply(thisArg, args)\n    return result\n  }\n\n  function leadingEdge(time: number) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait)\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result\n  }\n\n  function remainingWait(time: number) {\n    const timeSinceLastCall = time - lastCallTime,\n      timeSinceLastInvoke = time - lastInvokeTime,\n      result = (wait as number) - timeSinceLastCall\n\n    return maxing ? Math.max(result, maxWait - timeSinceLastInvoke) : result\n  }\n\n  function shouldInvoke(time: number) {\n    const timeSinceLastCall = time - lastCallTime,\n      timeSinceLastInvoke = time - lastInvokeTime\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= (wait as number) ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    )\n  }\n\n  function timerExpired() {\n    const time = Date.now()\n    if (shouldInvoke(time)) {\n      return trailingEdge(time)\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time))\n  }\n\n  function trailingEdge(time: number) {\n    timerId = undefined\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time)\n    }\n    lastArgs = lastThis = undefined\n    return result\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId)\n    }\n    lastInvokeTime = 0\n    lastArgs = lastCallTime = lastThis = timerId = undefined\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(Date.now())\n  }\n\n  function debounced(this: any) {\n    const time = Date.now(),\n      isInvoking = shouldInvoke(time)\n\n    // eslint-disable-next-line prefer-rest-params\n    lastArgs = arguments\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    lastThis = this\n    lastCallTime = time\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime)\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait)\n        return invokeFunc(lastCallTime)\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait)\n    }\n    return result\n  }\n\n  debounced.cancel = cancel\n  debounced.flush = flush\n  return debounced\n}\n"],"names":["FUNC_ERROR_TEXT","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","toNumber","isObject","invokeFunc","time","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking"],"mappings":"yFAKMA,EAAkB,sBAER,SAAAC,EACdC,EACAC,EACAC,EACkB,CACd,IAAAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAiB,EACjBC,EAAU,GACVC,EAAS,GACTC,EAAW,GAEX,GAAA,OAAOZ,GAAQ,WACX,MAAA,IAAI,UAAUF,CAAe,EAE9BG,EAAAY,EAAA,SAASZ,CAAI,GAAK,EACrBa,EAAAA,SAASZ,CAAO,IACRQ,EAAA,CAAC,CAACR,EAAQ,QACpBS,EAAS,YAAaT,EACZG,EAAAM,EACN,KAAK,IAAIE,EAAA,SAASX,EAAQ,OAAO,GAAK,EAAGD,CAAc,EACvDI,EACJO,EAAW,aAAcV,EAAU,CAAC,CAACA,EAAQ,SAAWU,GAG1D,SAASG,EAAWC,EAAc,CAC1B,MAAAC,EAAOd,EACXe,EAAUd,EAEZ,OAAAD,EAAWC,EAAW,OACLK,EAAAO,EACRV,EAAAN,EAAK,MAAMkB,EAASD,CAAI,EAC1BX,CACT,CAEA,SAASa,EAAYH,EAAc,CAEhB,OAAAP,EAAAO,EAEPT,EAAA,WAAWa,EAAcnB,CAAI,EAEhCS,EAAUK,EAAWC,CAAI,EAAIV,CACtC,CAEA,SAASe,EAAcL,EAAc,CACnC,MAAMM,EAAoBN,EAAOR,EAC/Be,EAAsBP,EAAOP,EAC7BH,EAAUL,EAAkBqB,EAE9B,OAAOX,EAAS,KAAK,IAAIL,EAAQD,EAAUkB,CAAmB,EAAIjB,CACpE,CAEA,SAASkB,EAAaR,EAAc,CAClC,MAAMM,EAAoBN,EAAOR,EAC/Be,EAAsBP,EAAOP,EAK/B,OACED,IAAiB,QACjBc,GAAsBrB,GACtBqB,EAAoB,GACnBX,GAAUY,GAAuBlB,CAEtC,CAEA,SAASe,GAAe,CAChB,MAAAJ,EAAO,KAAK,MACd,GAAAQ,EAAaR,CAAI,EACnB,OAAOS,EAAaT,CAAI,EAG1BT,EAAU,WAAWa,EAAcC,EAAcL,CAAI,CAAC,CACxD,CAEA,SAASS,EAAaT,EAAc,CAKlC,OAJUT,EAAA,OAINK,GAAYT,EACPY,EAAWC,CAAI,GAExBb,EAAWC,EAAW,OACfE,EACT,CAEA,SAASoB,GAAS,CACZnB,IAAY,QACd,aAAaA,CAAO,EAELE,EAAA,EACNN,EAAAK,EAAeJ,EAAWG,EAAU,MACjD,CAEA,SAASoB,GAAQ,CACf,OAAOpB,IAAY,OAAYD,EAASmB,EAAa,KAAK,KAAK,CACjE,CAEA,SAASG,GAAqB,CAC5B,MAAMZ,EAAO,KAAK,IAAA,EAChBa,EAAaL,EAAaR,CAAI,EAQhC,GALWb,EAAA,UAEAC,EAAA,KACII,EAAAQ,EAEXa,EAAY,CACd,GAAItB,IAAY,OACd,OAAOY,EAAYX,CAAY,EAEjC,GAAIG,EAEQ,OAAAJ,EAAA,WAAWa,EAAcnB,CAAI,EAChCc,EAAWP,CAAY,CAElC,CACA,OAAID,IAAY,SACJA,EAAA,WAAWa,EAAcnB,CAAI,GAElCK,CACT,CAEA,OAAAsB,EAAU,OAASF,EACnBE,EAAU,MAAQD,EACXC,CACT"}