{"version":3,"file":"use-row-notice-bar.js","sources":["uni_modules/tuniaoui-vue3/components/notice-bar/src/composables/use-row-notice-bar.ts"],"sourcesContent":["import {\n  computed,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { noticeBarKey } from '../../../../tokens'\nimport { useSelectorQuery } from '../../../../hooks'\nimport {\n  debugWarn,\n  generateId,\n  isEmptyVariableInDefault,\n} from '../../../../utils'\n\nexport const useRowNoticeBar = () => {\n  const instance = getCurrentInstance()\n  const noticeBar = inject(noticeBarKey, null)\n\n  const { getSelectorNodeInfo } = useSelectorQuery(instance)\n\n  const componentId = `trnb-${generateId()}`\n  const componentTextId = `${componentId}-text`\n\n  // 需要显示的数据\n  const data = computed<string>(() => {\n    if (!noticeBar?.data?.length) return ''\n    return noticeBar.data.join(' ')\n  })\n\n  // 每秒显示的像素数\n  const speed = computed<number>(() =>\n    isEmptyVariableInDefault(noticeBar?.speed, 80)\n  )\n\n  // 动画参数\n  let animationDuration = 0\n  let animation: UniApp.Animation | null = null\n  const animationData = ref<any>(null)\n  let animationLoopTimer: ReturnType<typeof setInterval> | null = null\n\n  // 创建动画\n  const createAnimation = () => {\n    animation = uni.createAnimation({\n      duration: animationDuration,\n      timingFunction: 'linear',\n    })\n\n    animation\n      .translateX(\n        -(contentWidth + contentTextWidth) + Number(Math.random() * 10)\n      )\n      .step({\n        duration: animationDuration,\n      })\n    animation.translateX(0).step({\n      duration: 0,\n    })\n\n    animationData.value = animation.export()\n  }\n  // 创建循环动画\n  const createLoopAnimation = () => {\n    createAnimation()\n    animationLoopTimer = setInterval(() => {\n      createAnimation()\n    }, animationDuration + 80)\n  }\n  // 停止动画\n  const stopAnimation = () => {\n    animation = null\n    animationData.value = null\n    if (animationLoopTimer) {\n      clearInterval(animationLoopTimer)\n      animationLoopTimer = null\n    }\n  }\n\n  watch(\n    () => noticeBar?.play,\n    (newVal) => {\n      if (newVal) {\n        createLoopAnimation()\n      } else {\n        stopAnimation()\n      }\n    }\n  )\n\n  let initCount = 0\n  // 获取内容区域容器信息\n  let contentWidth = 0\n  let contentTextWidth = 0\n  const getContentRectInfo = async () => {\n    try {\n      const contentRectInfo = await getSelectorNodeInfo(`#${componentId}`)\n      const contentTextRectInfo = await getSelectorNodeInfo(\n        `#${componentTextId}`\n      )\n\n      initCount = 0\n\n      // 根据 t=s/v(时间=路程/速度)\n      contentWidth = contentRectInfo.width || 0\n      contentTextWidth = contentTextRectInfo.width || 0\n      animationDuration =\n        ((contentWidth + contentTextWidth) / speed.value) * 1000\n\n      if (noticeBar?.play && noticeBar?.autoPlay) {\n        setTimeout(() => {\n          createLoopAnimation()\n        }, 50)\n      }\n    } catch (err) {\n      if (initCount > 10) {\n        initCount = 0\n        debugWarn('TnNoticeBar', `获取通知栏容器信息失败: ${err}`)\n        return\n      }\n      initCount++\n      setTimeout(() => {\n        getContentRectInfo()\n      }, 150)\n    }\n  }\n\n  // 如果修改了speed重新初始化\n  watch(\n    () => noticeBar?.speed,\n    () => {\n      stopAnimation()\n      getContentRectInfo()\n    }\n  )\n\n  // 通知点击事件\n  const noticeClickEvent = () => {\n    noticeBar?.click(0)\n  }\n\n  onMounted(() => {\n    nextTick(() => {\n      getContentRectInfo()\n    })\n  })\n\n  return {\n    componentId,\n    componentTextId,\n    data,\n    animationData,\n    noticeClickEvent,\n  }\n}\n"],"names":["useRowNoticeBar","instance","getCurrentInstance","noticeBar","inject","noticeBarKey","getSelectorNodeInfo","useSelectorQuery","componentId","generateId","componentTextId","data","computed","_a","speed","isEmptyVariableInDefault","animationDuration","animation","animationData","ref","animationLoopTimer","createAnimation","uni","contentWidth","contentTextWidth","createLoopAnimation","stopAnimation","watch","newVal","initCount","getContentRectInfo","contentRectInfo","contentTextRectInfo","err","debugWarn","noticeClickEvent","onMounted","nextTick"],"mappings":"kZAiBO,MAAMA,EAAkB,IAAM,CACnC,MAAMC,EAAWC,EAAAA,qBACXC,EAAYC,EAAAA,OAAOC,EAAA,aAAc,IAAI,EAErC,CAAE,oBAAAC,CAAA,EAAwBC,EAAA,iBAAiBN,CAAQ,EAEnDO,EAAc,QAAQC,EAAA,WAAA,CAAY,GAClCC,EAAkB,GAAGF,CAAW,QAGhCG,EAAOC,EAAAA,SAAiB,IAAM,OAC9B,OAACC,EAAAV,GAAA,YAAAA,EAAW,OAAX,MAAAU,EAAiB,OACfV,EAAU,KAAK,KAAK,GAAG,EADO,EACP,CAC/B,EAGKW,EAAQF,EAAA,SAAiB,IAC7BG,2BAAyBZ,GAAA,YAAAA,EAAW,MAAO,EAAE,CAAA,EAI/C,IAAIa,EAAoB,EACpBC,EAAqC,KACnC,MAAAC,EAAgBC,MAAS,IAAI,EACnC,IAAIC,EAA4D,KAGhE,MAAMC,EAAkB,IAAM,CAC5BJ,EAAYK,QAAI,gBAAgB,CAC9B,SAAUN,EACV,eAAgB,QAAA,CACjB,EAGEC,EAAA,WACC,EAAEM,EAAeC,GAAoB,OAAO,KAAK,SAAW,EAAE,GAE/D,KAAK,CACJ,SAAUR,CAAA,CACX,EACOC,EAAA,WAAW,CAAC,EAAE,KAAK,CAC3B,SAAU,CAAA,CACX,EAEaC,EAAA,MAAQD,EAAU,QAAO,EAGnCQ,EAAsB,IAAM,CAChBJ,IAChBD,EAAqB,YAAY,IAAM,CACrBC,GAAA,EACfL,EAAoB,EAAE,CAAA,EAGrBU,EAAgB,IAAM,CACdT,EAAA,KACZC,EAAc,MAAQ,KAClBE,IACF,cAAcA,CAAkB,EACXA,EAAA,KACvB,EAGFO,EAAA,MACE,IAAMxB,GAAA,YAAAA,EAAW,KAChByB,GAAW,CACNA,EACkBH,IAENC,GAElB,CAAA,EAGF,IAAIG,EAAY,EAEZN,EAAe,EACfC,EAAmB,EACvB,MAAMM,EAAqB,SAAY,CACjC,GAAA,CACF,MAAMC,EAAkB,MAAMzB,EAAoB,IAAIE,CAAW,EAAE,EAC7DwB,EAAsB,MAAM1B,EAChC,IAAII,CAAe,EAAA,EAGTmB,EAAA,EAGZN,EAAeQ,EAAgB,OAAS,EACxCP,EAAmBQ,EAAoB,OAAS,EAE5ChB,GAAAO,EAAeC,GAAoBV,EAAM,MAAS,IAElDX,GAAA,MAAAA,EAAW,OAAQA,GAAA,MAAAA,EAAW,WAChC,WAAW,IAAM,CACKsB,KACnB,EAAE,QAEAQ,EAAK,CACZ,GAAIJ,EAAY,GAAI,CACNA,EAAA,EACFK,EAAAA,UAAA,cAAe,gBAAgBD,CAAG,EAAE,EAC9C,MACF,CACAJ,IACA,WAAW,IAAM,CACIC,KAClB,GAAG,CACR,CAAA,EAIFH,EAAA,MACE,IAAMxB,GAAA,YAAAA,EAAW,MACjB,IAAM,CACUuB,IACKI,GACrB,CAAA,EAIF,MAAMK,EAAmB,IAAM,CAC7BhC,GAAA,MAAAA,EAAW,MAAM,EAAC,EAGpBiC,OAAAA,EAAAA,UAAU,IAAM,CACdC,EAAAA,WAAS,IAAM,CACMP,GAAA,CACpB,CAAA,CACF,EAEM,CACL,YAAAtB,EACA,gBAAAE,EACA,KAAAC,EACA,cAAAO,EACA,iBAAAiB,CAAA,CAEJ"}