{"version":3,"file":"use-row-notice-bar.js","sources":["uni_modules/tuniaoui-vue3/components/notice-bar/src/composables/use-row-notice-bar.ts"],"sourcesContent":["import {\n  computed,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { noticeBarKey } from '../../../../tokens'\nimport { useSelectorQuery } from '../../../../hooks'\nimport {\n  debugWarn,\n  generateId,\n  isEmptyVariableInDefault,\n} from '../../../../utils'\n\nexport const useRowNoticeBar = () => {\n  const instance = getCurrentInstance()\n  const noticeBar = inject(noticeBarKey, null)\n\n  const { getSelectorNodeInfo } = useSelectorQuery(instance)\n\n  const componentId = `trnb-${generateId()}`\n  const componentTextId = `${componentId}-text`\n\n  // 需要显示的数据\n  const data = computed<string>(() => {\n    if (!noticeBar?.data?.length) return ''\n    return noticeBar.data.join(' ')\n  })\n\n  // 每秒显示的像素数\n  const speed = computed<number>(() =>\n    isEmptyVariableInDefault(noticeBar?.speed, 80)\n  )\n\n  // 动画参数\n  let animationDuration = 0\n  let animation: UniApp.Animation | null = null\n  const animationData = ref<any>(null)\n  let animationLoopTimer: ReturnType<typeof setInterval> | null = null\n\n  // 创建动画\n  const createAnimation = () => {\n    animation = uni.createAnimation({\n      duration: animationDuration,\n      timingFunction: 'linear',\n    })\n\n    animation\n      .translateX(\n        -(contentWidth + contentTextWidth) + Number(Math.random() * 10)\n      )\n      .step({\n        duration: animationDuration,\n      })\n    animation.translateX(0).step({\n      duration: 0,\n    })\n\n    animationData.value = animation.export()\n  }\n  // 创建循环动画\n  const createLoopAnimation = () => {\n    createAnimation()\n    animationLoopTimer = setInterval(() => {\n      createAnimation()\n    }, animationDuration + 80)\n  }\n  // 停止动画\n  const stopAnimation = () => {\n    animation = null\n    animationData.value = null\n    if (animationLoopTimer) {\n      clearInterval(animationLoopTimer)\n      animationLoopTimer = null\n    }\n  }\n\n  watch(\n    () => noticeBar?.play,\n    (newVal) => {\n      if (newVal) {\n        createLoopAnimation()\n      } else {\n        stopAnimation()\n      }\n    }\n  )\n\n  let initCount = 0\n  // 获取内容区域容器信息\n  let contentWidth = 0\n  let contentTextWidth = 0\n  const getContentRectInfo = async () => {\n    try {\n      const contentRectInfo = await getSelectorNodeInfo(`#${componentId}`)\n      const contentTextRectInfo = await getSelectorNodeInfo(\n        `#${componentTextId}`\n      )\n\n      initCount = 0\n\n      // 根据 t=s/v(时间=路程/速度)\n      contentWidth = contentRectInfo.width || 0\n      contentTextWidth = contentTextRectInfo.width || 0\n      animationDuration =\n        ((contentWidth + contentTextWidth) / speed.value) * 1000\n\n      if (noticeBar?.play && noticeBar?.autoPlay) {\n        setTimeout(() => {\n          createLoopAnimation()\n        }, 50)\n      }\n    } catch (err) {\n      if (initCount > 10) {\n        initCount = 0\n        debugWarn('TnNoticeBar', `获取通知栏容器信息失败: ${err}`)\n        return\n      }\n      initCount++\n      setTimeout(() => {\n        getContentRectInfo()\n      }, 150)\n    }\n  }\n\n  // 如果修改了speed重新初始化\n  watch(\n    () => noticeBar?.speed,\n    () => {\n      stopAnimation()\n      getContentRectInfo()\n    }\n  )\n\n  // 通知点击事件\n  const noticeClickEvent = () => {\n    noticeBar?.click(0)\n  }\n\n  onMounted(() => {\n    nextTick(() => {\n      getContentRectInfo()\n    })\n  })\n\n  return {\n    componentId,\n    componentTextId,\n    data,\n    animationData,\n    noticeClickEvent,\n  }\n}\n"],"names":["getCurrentInstance","inject","noticeBarKey","useSelectorQuery","generateId","computed","isEmptyVariableInDefault","ref","uni","watch","debugWarn","onMounted","nextTick"],"mappings":";;;;;;;;;AAiBO,MAAM,kBAAkB,MAAM;AACnC,QAAM,WAAWA,cAAAA;AACX,QAAA,YAAYC,cAAAA,OAAOC,0CAAA,cAAc,IAAI;AAE3C,QAAM,EAAE,oBAAA,IAAwBC,sDAAA,iBAAiB,QAAQ;AAEnD,QAAA,cAAc,QAAQC,oCAAA,WAAA,CAAY;AAClC,QAAA,kBAAkB,GAAG,WAAW;AAGhC,QAAA,OAAOC,cAAAA,SAAiB,MAAM;;AAC9B,QAAA,GAAC,4CAAW,SAAX,mBAAiB;AAAe,aAAA;AAC9B,WAAA,UAAU,KAAK,KAAK,GAAG;AAAA,EAAA,CAC/B;AAGD,QAAM,QAAQA,cAAA;AAAA,IAAiB,MAC7BC,gEAAyB,uCAAW,OAAO,EAAE;AAAA,EAAA;AAI/C,MAAI,oBAAoB;AACxB,MAAI,YAAqC;AACnC,QAAA,gBAAgBC,kBAAS,IAAI;AACnC,MAAI,qBAA4D;AAGhE,QAAM,kBAAkB,MAAM;AAC5B,gBAAYC,oBAAI,gBAAgB;AAAA,MAC9B,UAAU;AAAA,MACV,gBAAgB;AAAA,IAAA,CACjB;AAGE,cAAA;AAAA,MACC,EAAE,eAAe,oBAAoB,OAAO,KAAK,WAAW,EAAE;AAAA,MAE/D,KAAK;AAAA,MACJ,UAAU;AAAA,IAAA,CACX;AACO,cAAA,WAAW,CAAC,EAAE,KAAK;AAAA,MAC3B,UAAU;AAAA,IAAA,CACX;AAEa,kBAAA,QAAQ,UAAU;EAAO;AAGzC,QAAM,sBAAsB,MAAM;AAChB;AAChB,yBAAqB,YAAY,MAAM;AACrB;IAAA,GACf,oBAAoB,EAAE;AAAA,EAAA;AAG3B,QAAM,gBAAgB,MAAM;AACd,gBAAA;AACZ,kBAAc,QAAQ;AACtB,QAAI,oBAAoB;AACtB,oBAAc,kBAAkB;AACX,2BAAA;AAAA,IACvB;AAAA,EAAA;AAGFC,gBAAA;AAAA,IACE,MAAM,uCAAW;AAAA,IACjB,CAAC,WAAW;AACV,UAAI,QAAQ;AACU;MAAA,OACf;AACS;MAChB;AAAA,IACF;AAAA,EAAA;AAGF,MAAI,YAAY;AAEhB,MAAI,eAAe;AACnB,MAAI,mBAAmB;AACvB,QAAM,qBAAqB,YAAY;AACjC,QAAA;AACF,YAAM,kBAAkB,MAAM,oBAAoB,IAAI,WAAW,EAAE;AACnE,YAAM,sBAAsB,MAAM;AAAA,QAChC,IAAI,eAAe;AAAA,MAAA;AAGT,kBAAA;AAGZ,qBAAe,gBAAgB,SAAS;AACxC,yBAAmB,oBAAoB,SAAS;AAE5C,2BAAA,eAAe,oBAAoB,MAAM,QAAS;AAElD,WAAA,uCAAW,UAAQ,uCAAW,WAAU;AAC1C,mBAAW,MAAM;AACK;WACnB,EAAE;AAAA,MACP;AAAA,aACO,KAAK;AACZ,UAAI,YAAY,IAAI;AACN,oBAAA;AACFC,6CAAAA,UAAA,eAAe,gBAAgB,GAAG,EAAE;AAC9C;AAAA,MACF;AACA;AACA,iBAAW,MAAM;AACI;SAClB,GAAG;AAAA,IACR;AAAA,EAAA;AAIFD,gBAAA;AAAA,IACE,MAAM,uCAAW;AAAA,IACjB,MAAM;AACU;AACK;IACrB;AAAA,EAAA;AAIF,QAAM,mBAAmB,MAAM;AAC7B,2CAAW,MAAM;AAAA,EAAC;AAGpBE,gBAAAA,UAAU,MAAM;AACdC,kBAAAA,WAAS,MAAM;AACM;IAAA,CACpB;AAAA,EAAA,CACF;AAEM,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;;"}